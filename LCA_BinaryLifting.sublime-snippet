<snippet>
	<content><![CDATA[
struct LCA {
  
  vector <long long> h;
  vector<vector<long long>>par;
  vector<vector<long long>>g;
  int base;
  int n;
  LCA (int n,int base):h(n+1,0),par(base,vector<long long>(n+1)), g(n+1){
   this->base = base;
   this->n = n;

 
  }    

  void dfs (int u,int p){

     for (auto x: g[u]){
        if (x == p)
          continue;
        par[0][x]=u;
        h[x]=h[u]+1;
       
        dfs(x,u);
     }
  }

  void init_LCA (){
     
     for (int i = 1; i < base; ++i){
        for (int j = 1; j<=n; ++j){
          par[i][j]=par[i-1][par[i-1][j]];
        }
     }

  }

  void set_edge (int x, int y){
  
    g[x].pb(y);
  }

  int query (int a,int b){

    if (h[a]<h[b]) swap(a,b);
    int len = h[a]-h[b];

    for (int i = base - 1; i>=0;--i){
       int cur=(len>>i)&1;
        if (cur)
          a=par[i][a];
    }
    if (a==b) return a;

    for (int i = base - 1; i>=0;--i){
       if (par[i][a]!=par[i][b])
          a=par[i][a], b=par[i][b];
    }

    return par[0][a];
  }


};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>LCA_BinaryLifting</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
